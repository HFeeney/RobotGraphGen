Make map class track obstacles in a list.
- collisionChecker -> returns if point is in any obstacle
- 

Obstacle class (just a rect)
- make a contains method (check if contains a point)

Graph class
- generate using map, also use the halton sequence to get points over map
    any point that fails collision check -> don't include
  impl rdisc, k nearest to get points to connect with a straight line
    - check edge - use van der corput sequence up to a certain resolution
    to verify the edge does not travel through obstacles
- display function FINISH THIS!
- each vertex needs id, coords, neighbors (adj list)


note: when doing k closest, some work is redone since when an edge is drawn the
vertex isn't added to the other node's neighbors...

since the k closest are selected, THEN the distance filter is applied, 
some nodes that could have k connections end up with fewer

currently using a simplified drawing method for graph...

going wrong:
    - edges being drawn through obstacles !!!
    - nodes within range aren't being connected for nodes with < k neighbors